apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-airflow-webserver
  labels:
    app.kubernetes.io/name: airflow-webserver
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/part-of: stream-analytics
spec:
  replicas: {{ .Values.airflowWebserver.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: airflow-webserver
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: airflow-webserver
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      {{- with .Values.global.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
        - name: airflow-webserver
          image: "{{ .Values.airflowWebserver.image.repository }}:{{ .Values.airflowWebserver.image.tag | default .Values.images.tag }}"
          imagePullPolicy: {{ .Values.images.pullPolicy }}
          env:
            - name: AIRFLOW__CORE__EXECUTOR
              value: {{ .Values.airflowWebserver.env.AIRFLOW__CORE__EXECUTOR }}
            - name: AIRFLOW__DATABASE__SQL_ALCHEMY_CONN
              value: {{ .Values.airflowWebserver.env.AIRFLOW__DATABASE__SQL_ALCHEMY_CONN }}
            - name: AIRFLOW__CORE__LOAD_EXAMPLES
              value: {{ .Values.airflowWebserver.env.AIRFLOW__CORE__LOAD_EXAMPLES }}
            - name: AIRFLOW__CORE__FERNET_KEY
              value: {{ .Values.airflowWebserver.env.AIRFLOW__CORE__FERNET_KEY }}
          resources:
            {{- toYaml .Values.airflowWebserver.resources | nindent 12 }}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 60
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 5
          command: ["airflow", "webserver"]
          volumeMounts:
            - name: dags-volume
              mountPath: /opt/airflow/dags
            - name: logs-volume
              mountPath: /opt/airflow/logs
            - name: plugins-volume
              mountPath: /opt/airflow/plugins
      volumes:
        - name: dags-volume
          configMap:
            name: airflow-dags
        - name: logs-volume
          persistentVolumeClaim:
            claimName: {{ .Release.Name }}-airflow-logs
        - name: plugins-volume
          emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-airflow-webserver
  labels:
    app.kubernetes.io/name: airflow-webserver
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/part-of: stream-analytics
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: airflow-webserver
    app.kubernetes.io/instance: {{ .Release.Name }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: airflow-dags
  labels:
    app.kubernetes.io/name: airflow-dags
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/part-of: stream-analytics
data:
  streaming_pipeline_dag.py: |-
    {{- (.Files.Get "airflow/dags/streaming_pipeline_dag.py") | nindent 4 }}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ .Release.Name }}-airflow-logs
  labels:
    app.kubernetes.io/name: airflow-logs
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/part-of: stream-analytics
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: {{ .Values.global.storageClass }}
  resources:
    requests:
      storage: {{ .Values.airflowWebserver.persistence.size }} 